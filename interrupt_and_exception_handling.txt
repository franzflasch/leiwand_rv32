

mtvec: [1:0]  MODE: Vectored or Direct
       [31:2] BASE: Interrupt Vector Base Address

        In direct mode all traps will set the PC to BASE
        In vectoed mode pc will be set to BASE+4*cause.

mcause: [30:0] Exception Code(WLRL): Code indicating what caused the traps
        [31:31] Interrupt: Indicates if it was an interrupt or some other Exception.

Important Note: Environment calls seem to set mepc to the instruction address which actually called ecall. Which means,
that the SW handler has to advance the address manually by 4. For "asynchronous interrupts" it seems, that this is done by the HW. 
Which means, that depending on source of the trap we need to advance the mepc by for or not. I am still not sure if this behavior is only
for ecall/ebreak or also all other non asynchronous interrupts.

Interrupt | Exception Code | Description:
    1     |       0        |    User software interrupt
    1     |       1        |    Supervisor software interrupt
    1     |       2        |    Reserved
    1     |       3        |    Machine software interrupt
    1     |       4        |    User timer interrupt
    1     |       5        |    Supervisor timer interrupt
    1     |       6        |    Reserved
    1     |       7        |    Machine timer interrupt
    1     |       8        |    User external interrupt
    1     |       9        |    Supervisor external interrupt
    1     |       10       |    Reserved
    1     |       11       |    Machine external interrupt
    1     |       ≥1       |    2 Reserved
    0     |       0        |    Instruction address misaligned
    0     |       1        |    Instruction access fault
    0     |       2        |    Illegal instruction
    0     |       3        |    Breakpoint
    0     |       4        |    Load address misaligned
    0     |       5        |    Load access fault
    0     |       6        |    Store/AMO address misaligned
    0     |       7        |    Store/AMO access fault
    0     |       8        |    Environment call from U-mode
    0     |       9        |    Environment call from S-mode
    0     |       10       |    Reserved
    0     |       11       |    Environment call from M-mode
    0     |       12       |    Instruction page fault
    0     |       13       |    Load page fault
    0     |       14       |    Reserved
    0     |       15       |    Store/AMO page fault
    0     |       ≥1       |    6 Reserved

mepc: 
    When a trap is taken into M-mode, mepc is written with the virtual address of the instruction that
    encountered the exception. Otherwise, mepc is never written by the implementation, though it may
    be explicitly written by software.

    - Means: For (synchronous) exceptions mepc will be set to the instruction which triggered the exception 
      and for (asynchronous) interrupts mepc will be set to PC+4. - https://stackoverflow.com/questions/58726942/risc-v-exceptions-vs-interrupts
      For asynchronous interrupts mepc is automatically set to PC+4 by HW. For synchronous exceptions (e.g. ecall) mepc is set to the PC which caused the trap.

priorities:

    Multiple simultaneous interrupts destined for different privilege modes are handled in decreasing
    order of destined privilege mode. Multiple simultaneous interrupts destined for the same privilege
    mode are handled in the following decreasing priority order: MEI, MSI, MTI, SEI, SSI, STI, UEI,
    USI, UTI. Synchronous exceptions are of lower priority than all interrupts.
